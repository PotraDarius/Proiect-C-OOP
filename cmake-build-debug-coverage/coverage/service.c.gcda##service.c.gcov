        -:    0:Source:/mnt/c/Users/chich/OneDrive/Desktop/An I Sem II/Programare Orientata Obiect/tema_lab2/service.c
        -:    0:Graph:/mnt/c/Users/chich/OneDrive/Desktop/An I Sem II/Programare Orientata Obiect/tema_lab2/cmake-build-debug-coverage/CMakeFiles/tema_lab2.dir/service.c.gcno
        -:    0:Data:/mnt/c/Users/chich/OneDrive/Desktop/An I Sem II/Programare Orientata Obiect/tema_lab2/cmake-build-debug-coverage/CMakeFiles/tema_lab2.dir/service.c.gcda
        -:    0:Runs:1
        -:    1:#include "service.h"
        -:    2:#include "assert.h"
        -:    3:#include "string.h"
        -:    4:#include "stdlib.h"
        -:    5:
        -:    6:
function creare_service called 9 returned 100% blocks executed 100%
        9:    7:void  creare_service(service * service1, repo * repository){
        9:    8:    service1->repository =  repository;
        9:    9:}
        -:   10:
function distrugere_service called 9 returned 100% blocks executed 100%
        9:   11:void distrugere_service(service * service1){
        9:   12:    distrugere_repository(service1->repository);
        9:   12-block  0
call    0 returned 9
        9:   13:    free(service1);
        9:   14:}
        -:   15:
        -:   16:
function adaugare_oferta called 15 returned 100% blocks executed 100%
       15:   17:int adaugare_oferta(service * service1, char * tip, char * destinatie, int an, int luna, int zi, int pret){
       15:   18:    data * data_plecare = malloc(sizeof(data));
       15:   19:    creare_data(data_plecare, zi, luna, an);
       15:   19-block  0
call    0 returned 15
       15:   20:    oferta * oferta1 = malloc(sizeof (oferta));
       15:   21:    creare_oferta(oferta1, tip, destinatie, data_plecare, pret);
call    0 returned 15
       15:   22:    int status_validare = validare_oferta(*oferta1);
call    0 returned 15
       15:   23:    if(status_validare == 0){
branch  0 taken 14 (fallthrough)
branch  1 taken 1
       14:   24:        int status = add_oferta(service1->repository, oferta1);
       14:   24-block  0
call    0 returned 14
       14:   25:        return status;
        -:   26:    }
        -:   27:    else{
        1:   28:        distrugere_oferta(oferta1);
        1:   28-block  0
call    0 returned 1
        1:   29:        return status_validare;
        -:   30:    }
        -:   31:}
        -:   32:
        -:   33:
function stergere_oferta called 1 returned 100% blocks executed 100%
        1:   34:int stergere_oferta(service * service1, int index){
        1:   35:    int status = delete_oferta( service1->repository, index);
        1:   35-block  0
call    0 returned 1
        1:   36:    return status;
        -:   37:}
        -:   38:
function modificare_oferta called 2 returned 100% blocks executed 100%
        2:   39:int modificare_oferta(service * service1, int index, char * tip, char * destinatie, int an, int luna, int zi, int pret){
        2:   40:    data * data_plecare = malloc(sizeof(data));
        2:   41:    creare_data(data_plecare, zi, luna, an);
        2:   41-block  0
call    0 returned 2
        -:   42:
        2:   43:    oferta * oferta1 = malloc(sizeof (oferta));
        2:   44:    creare_oferta(oferta1, tip, destinatie, data_plecare, pret);
call    0 returned 2
        -:   45:
        2:   46:    int status_validare = validare_oferta(*oferta1);
call    0 returned 2
        2:   47:    if(status_validare == 0){
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   48:        int status = modify_oferta(service1->repository,index ,oferta1);
        1:   48-block  0
call    0 returned 1
        1:   49:        distrugere_oferta(oferta1);
call    0 returned 1
        1:   50:        return status;
        -:   51:    }
        -:   52:    else{
        1:   53:        distrugere_oferta(oferta1);
        1:   53-block  0
call    0 returned 1
        1:   54:        return status_validare;
        -:   55:    }
        -:   56:}
        -:   57:
        -:   58:
        -:   59:
        -:   60:
        -:   61:
function filtru_destinatie called 1 returned 100% blocks executed 100%
        1:   62:int  filtru_destinatie(service * service1, char * destinatie, oferta ** filtru){
        1:   63:    int numar_oferte_gasite = 0;
        3:   64:    for(int i = 0; i < service1->repository->numar_oferte_curente; i++){
        1:   64-block  0
        2:   64-block  1
        3:   64-block  2
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:   65:        if(strcmp(service1->repository->oferte[i]->destinatie, destinatie) == 0){
        2:   65-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   66:            copiere_date(filtru[numar_oferte_gasite] , service1->repository->oferte[i]);
        1:   66-block  0
call    0 returned 1
        1:   67:            numar_oferte_gasite ++;
        -:   68:        }
        -:   69:    }
        1:   70:    return numar_oferte_gasite;
        1:   70-block  0
        -:   71:}
        -:   72:
function filtru_pret called 1 returned 100% blocks executed 100%
        1:   73:int  filtru_pret(service * service1, int pret, oferta ** filtru){
        1:   74:    int numar_oferte_gasite = 0;
        3:   75:    for(int i = 0; i < service1->repository->numar_oferte_curente; i++){
        1:   75-block  0
        2:   75-block  1
        3:   75-block  2
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:   76:        if(service1->repository->oferte[i]->pret <= pret){
        2:   76-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   77:            copiere_date(filtru[numar_oferte_gasite] , service1->repository->oferte[i]);
        1:   77-block  0
call    0 returned 1
        1:   78:            numar_oferte_gasite ++;
        -:   79:        }
        -:   80:    }
        1:   81:    return numar_oferte_gasite;
        1:   81-block  0
        -:   82:}
        -:   83:
        -:   84:
        -:   85:
function filtru_tip called 1 returned 100% blocks executed 100%
        1:   86:int  filtru_tip(service * service1, char * tip, oferta ** filtru){
        -:   87:
        -:   88:
        1:   89:    int numar_oferte_gasite = 0;
        3:   90:    for(int i = 0; i < service1->repository->numar_oferte_curente; i++){
        1:   90-block  0
        2:   90-block  1
        3:   90-block  2
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:   91:        if(strcmp(service1->repository->oferte[i]->tip, tip) == 0){
        2:   91-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   92:            copiere_date(filtru[numar_oferte_gasite] , service1->repository->oferte[i]);
        1:   92-block  0
call    0 returned 1
        1:   93:            numar_oferte_gasite ++;
        -:   94:        }
        -:   95:    }
        1:   96:    return numar_oferte_gasite;
        1:   96-block  0
        -:   97:}
        -:   98:
function verificare_conditie_sortare_pret called 21 returned 100% blocks executed 100%
       21:   99:int verificare_conditie_sortare_pret(oferta oferta1, oferta oferta2, char * directie){
       21:  100:    if(strcmp(directie,"crescator") == 0){
       21:  100-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 11
       10:  101:        if (oferta1.pret > oferta2.pret){
       10:  101-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 8
        2:  102:            return 1;
        2:  102-block  0
        -:  103:        }
        8:  104:        return 0;
        8:  104-block  0
        -:  105:    }
       11:  106:    else if(strcmp(directie, "descrescator") == 0){
       11:  106-block  0
branch  0 taken 10 (fallthrough)
branch  1 taken 1
       10:  107:        if (oferta1.pret < oferta2.pret){
       10:  107-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 7
        3:  108:            return 1;
        3:  108-block  0
        -:  109:        }
        7:  110:        return 0;
        7:  110-block  0
        -:  111:    }
        1:  112:    return 0;
        1:  112-block  0
        -:  113:}
        -:  114:
function verificare_conditie_sortare_destinatie called 7 returned 100% blocks executed 100%
        7:  115:int verificare_conditie_sortare_destinatie(oferta oferta1, oferta oferta2, char * directie){
        7:  116:    if(strcmp(directie,"crescator") == 0){
        7:  116-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 4
        3:  117:        if (strcmp(oferta1.destinatie, oferta2.destinatie) > 0){
        3:  117-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  118:            return 1;
        2:  118-block  0
        -:  119:        }
        1:  120:        return 0;
        1:  120-block  0
        -:  121:    }
        4:  122:    else if(strcmp(directie, "descrescator") == 0){
        4:  122-block  0
branch  0 taken 3 (fallthrough)
branch  1 taken 1
        3:  123:        if (strcmp(oferta1.destinatie, oferta2.destinatie) < 0){
        3:  123-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  124:            return 1;
        1:  124-block  0
        -:  125:        }
        2:  126:        return 0;
        2:  126-block  0
        -:  127:    }
        1:  128:    return 0;
        1:  128-block  0
        -:  129:}
        -:  130:
function sortare_dupa_destinatie called 6 returned 100% blocks executed 100%
        6:  131:int sortare_dupa_destinatie(oferta * * oferte,int inceput, int lungime, char * directie,
        -:  132:                            int (*cmp2)(oferta oferta1, oferta oferta2, char * destinatie)){
        6:  133:    oferta * aux = malloc(sizeof (oferta));
        6:  134:    data * data1 = malloc(sizeof(data));
        6:  135:    creare_data(data1,1,1,1);
        6:  135-block  0
call    0 returned 6
        6:  136:    creare_oferta(aux,"1","1",data1,1);
call    0 returned 6
       10:  137:    for (int i = inceput; i < lungime - 1; i++) {
        4:  137-block  0
       10:  137-block  1
branch  0 taken 4
branch  1 taken 6 (fallthrough)
       10:  138:        for (int j = i + 1; j < lungime; j++) {
        4:  138-block  0
        6:  138-block  1
       10:  138-block  2
branch  0 taken 6
branch  1 taken 4 (fallthrough)
        6:  139:            if (cmp2(*oferte[i], *oferte[j],directie) == 1) {
        6:  139-block  0
call    0 returned 6
branch  1 taken 3 (fallthrough)
branch  2 taken 3
        3:  140:                copiere_date(aux , oferte[i]);
        3:  140-block  0
call    0 returned 3
        3:  141:                copiere_date(oferte[i] , oferte[j]);
call    0 returned 3
        3:  142:                copiere_date(oferte[j] , aux);
call    0 returned 3
        -:  143:            }
        -:  144:        }
        -:  145:    }
        6:  146:    distrugere_oferta(aux);
        6:  146-block  0
call    0 returned 6
        6:  147:    return 0;
        -:  148:}
        -:  149:
function sortare called 3 returned 100% blocks executed 100%
        3:  150:int sortare(service * service1, char * directie, int(*cmp1)(oferta oferta1, oferta oferta2, char * destinatie),
        -:  151:            int (*cmp2)(oferta oferta1, oferta oferta2, char * destinatie)){
        3:  152:    if(service1->repository->numar_oferte_curente > 0) {
        3:  152-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  153:        oferta * aux_var = malloc(sizeof (oferta));
        2:  154:        data * data1 = malloc(sizeof(data));
        2:  155:        creare_data(data1,1,1,1);
        2:  155-block  0
call    0 returned 2
        2:  156:        creare_oferta(aux_var,"1","1",data1,1);
call    0 returned 2
       10:  157:        for (int i = 0; i < service1->repository->numar_oferte_curente - 1; i++) {
        8:  157-block  0
       10:  157-block  1
branch  0 taken 8
branch  1 taken 2 (fallthrough)
       28:  158:            for (int j = i + 1; j < service1->repository->numar_oferte_curente; j++) {
        8:  158-block  0
       20:  158-block  1
       28:  158-block  2
branch  0 taken 20
branch  1 taken 8 (fallthrough)
       20:  159:                if (cmp1(*service1->repository->oferte[i], *service1->repository->oferte[j],
       20:  159-block  0
call    0 returned 20
branch  1 taken 5 (fallthrough)
branch  2 taken 15
        -:  160:                                                     directie) == 1) {
        -:  161:
        5:  162:                    copiere_date(aux_var, service1->repository->oferte[i]);
        5:  162-block  0
call    0 returned 5
        5:  163:                    copiere_date(service1->repository->oferte[i], service1->repository->oferte[j]);
call    0 returned 5
        5:  164:                    copiere_date(service1->repository->oferte[j], aux_var);
call    0 returned 5
        -:  165:                }
        -:  166:            }
        -:  167:        }
        2:  168:        distrugere_oferta(aux_var);
        2:  168-block  0
call    0 returned 2
        2:  169:        oferta **aux= malloc(service1->repository->numar_oferte_curente * sizeof(oferta*));
       12:  170:        for(int i = 0; i < service1->repository->numar_oferte_curente; i++){
       12:  170-block  0
branch  0 taken 10
branch  1 taken 2 (fallthrough)
       10:  171:            data * data2 = malloc(sizeof(data));
       10:  172:            creare_data(data2,1,1,1);
       10:  172-block  0
call    0 returned 10
       10:  173:            aux[i] = malloc(sizeof(oferta));
       10:  174:            creare_oferta(aux[i],"1ftgshfhg","1sfghdsdfh",data2,1);
call    0 returned 10
        -:  175:        }
        2:  176:        int index_sfarsit_aux = 0;
        2:  177:        int index_inceput_aux = 0;
        2:  178:        int pret_initial = service1->repository->oferte[0]->pret;
       12:  179:        for (int i = 0; i < service1->repository->numar_oferte_curente; i++) {
        2:  179-block  0
       10:  179-block  1
       12:  179-block  2
branch  0 taken 10
branch  1 taken 2 (fallthrough)
       10:  180:                if(service1->repository->oferte[i]->pret == pret_initial){
       10:  180-block  0
branch  0 taken 6 (fallthrough)
branch  1 taken 4
        6:  181:                    copiere_date(aux[index_sfarsit_aux++] , service1->repository->oferte[i]);
        6:  181-block  0
call    0 returned 6
        -:  182:                }
        -:  183:                else{
        4:  184:                    sortare_dupa_destinatie(aux,index_inceput_aux, index_sfarsit_aux,directie,cmp2);
        4:  184-block  0
call    0 returned 4
       10:  185:                    for(int j = index_inceput_aux; j < index_sfarsit_aux; j++){
       10:  185-block  0
branch  0 taken 6
branch  1 taken 4 (fallthrough)
        6:  186:                        copiere_date(service1->repository->oferte[j] , aux[j]);
        6:  186-block  0
call    0 returned 6
        -:  187:                    }
        4:  188:                    index_inceput_aux = index_sfarsit_aux;
        4:  189:                    pret_initial = service1->repository->oferte[i]->pret;
        4:  190:                    copiere_date(aux[index_sfarsit_aux++] , service1->repository->oferte[i]);
        4:  190-block  0
call    0 returned 4
        -:  191:                }
        -:  192:        }
        2:  193:        sortare_dupa_destinatie(aux, index_inceput_aux,index_sfarsit_aux,directie,cmp2);
        2:  193-block  0
call    0 returned 2
        6:  194:        for(int j = index_inceput_aux; j < index_sfarsit_aux; j++){
        6:  194-block  0
branch  0 taken 4
branch  1 taken 2 (fallthrough)
        4:  195:            copiere_date(service1->repository->oferte[j] , aux[j]);
        4:  195-block  0
call    0 returned 4
        -:  196:        }
       12:  197:        for(int i = 0; i < service1->repository->numar_oferte_curente; i++){
        2:  197-block  0
       12:  197-block  1
branch  0 taken 10
branch  1 taken 2 (fallthrough)
       10:  198:            distrugere_oferta(aux[i]);
       10:  198-block  0
call    0 returned 10
        -:  199:        }
        2:  200:        free(aux);
        2:  201:        return 0;
        2:  201-block  0
        -:  202:    }
        -:  203:    else{
        1:  204:        return 1;
        1:  204-block  0
        -:  205:    }
        -:  206:}
        -:  207:
        -:  208:
function test_filtru_destinatie called 1 returned 100% blocks executed 92%
        1:  209:void test_filtru_destinatie(){
        1:  210:    repo * repo1 = malloc(sizeof(repo));
        1:  211:    creare_repository(repo1);
        1:  211-block  0
call    0 returned 1
        -:  212:
        1:  213:    service * service1 = malloc(sizeof(service));
        -:  214:
        1:  215:    creare_service(service1, repo1);
call    0 returned 1
        -:  216:
        1:  217:    adaugare_oferta(service1, "Munte", "Fagaras", 2024, 4,12, 500);
call    0 returned 1
        1:  218:    adaugare_oferta(service1,"Munte", "Himalaya", 2024, 5,17, 700);
call    0 returned 1
        1:  219:    oferta * * filtru = malloc(service1->repository->capacitate * sizeof(oferta*));
        -:  220:
        3:  221:    for(int i = 0; i < service1->repository->capacitate ; i++){
        3:  221-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:  222:        data * data1 = malloc(sizeof(data));
        2:  223:        creare_data(data1,1,1,1);
        2:  223-block  0
call    0 returned 2
        2:  224:        filtru[i] = malloc(sizeof(oferta));
        2:  225:        creare_oferta(filtru[i],"","",data1,1);
call    0 returned 2
        -:  226:    }
        -:  227:
        1:  228:    int numar_oferte_filtru = filtru_destinatie(service1, "Fagaras", filtru);
        1:  228-block  0
call    0 returned 1
        -:  229:
        1:  230:    data *data1 = malloc(sizeof(data));
        1:  231:    creare_data(data1,12,4,2024);
call    0 returned 1
        -:  232:
        1:  233:    oferta  *oferta1 = malloc(sizeof(oferta));
        1:  234:    creare_oferta(oferta1, "Munte", "Fagaras", data1, 500);
call    0 returned 1
        -:  235:
       1*:  236:    assert(numar_oferte_filtru == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  236-block  0
call    2 never executed
       1*:  237:    assert(verificare_egalitate(*filtru[0], *oferta1) == 1);
        1:  237-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  237-block  1
call    3 never executed
        -:  238:
        3:  239:    for(int i = 0; i < service1->repository->capacitate ; i++){
        1:  239-block  0
        3:  239-block  1
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:  240:        distrugere_oferta(filtru[i]);
        2:  240-block  0
call    0 returned 2
        -:  241:    }
        1:  242:    free(filtru);
        -:  243:
        1:  244:    distrugere_oferta(oferta1);
        1:  244-block  0
call    0 returned 1
        1:  245:    distrugere_service(service1);
call    0 returned 1
        -:  246:
        -:  247:
        1:  248:}
        -:  249:
function test_filtru_pret called 1 returned 100% blocks executed 92%
        1:  250:void test_filtru_pret(){
        1:  251:    repo * repo1 = malloc(sizeof(repo));
        1:  252:    creare_repository(repo1);
        1:  252-block  0
call    0 returned 1
        -:  253:
        1:  254:    service * service1 = malloc(sizeof(service));
        -:  255:
        1:  256:    creare_service(service1, repo1);
call    0 returned 1
        -:  257:
        1:  258:    adaugare_oferta(service1, "Munte", "Fagaras", 2024, 4,12, 500);
call    0 returned 1
        1:  259:    adaugare_oferta(service1,"Munte", "Himalaya", 2024, 5,17, 700);
call    0 returned 1
        1:  260:    oferta * * filtru = malloc(service1->repository->capacitate * sizeof(oferta*));
        -:  261:
        3:  262:    for(int i = 0; i < service1->repository->capacitate ; i++){
        3:  262-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:  263:        data * data1 = malloc(sizeof(data));
        2:  264:        creare_data(data1,1,1,1);
        2:  264-block  0
call    0 returned 2
        2:  265:        filtru[i] = malloc(sizeof(oferta));
        2:  266:        creare_oferta(filtru[i],"","",data1,1);
call    0 returned 2
        -:  267:    }
        -:  268:
        -:  269:
        1:  270:    int numar_oferte_filtru = filtru_pret(service1, 600, filtru);
        1:  270-block  0
call    0 returned 1
        -:  271:
        -:  272:
        1:  273:    data * data1 = malloc(sizeof(data));
        1:  274:    creare_data(data1,12,4,2024);
call    0 returned 1
        1:  275:    oferta *oferta1 = malloc(sizeof(oferta));
        1:  276:    creare_oferta(oferta1,"Munte", "Fagaras", data1, 500);
call    0 returned 1
       1*:  277:    assert(numar_oferte_filtru == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  277-block  0
call    2 never executed
       1*:  278:    assert(verificare_egalitate(*filtru[0], *oferta1) == 1);
        1:  278-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  278-block  1
call    3 never executed
        -:  279:
        3:  280:    for(int i = 0; i < service1->repository->capacitate ; i++){
        1:  280-block  0
        3:  280-block  1
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:  281:        distrugere_oferta(filtru[i]);
        2:  281-block  0
call    0 returned 2
        -:  282:    }
        1:  283:    free(filtru);
        -:  284:
        1:  285:    distrugere_oferta(oferta1);
        1:  285-block  0
call    0 returned 1
        1:  286:    distrugere_service(service1);
call    0 returned 1
        -:  287:
        1:  288:}
        -:  289:
function test_filtru_tip called 1 returned 100% blocks executed 92%
        1:  290:void test_filtru_tip(){
        1:  291:    repo * repo1 = malloc(sizeof(repo));
        1:  292:    creare_repository(repo1);
        1:  292-block  0
call    0 returned 1
        -:  293:
        1:  294:    service * service1 = malloc(sizeof(service));
        -:  295:
        1:  296:    creare_service(service1, repo1);
call    0 returned 1
        -:  297:
        1:  298:    adaugare_oferta(service1, "Munte", "Fagaras", 2024, 4,12, 500);
call    0 returned 1
        1:  299:    adaugare_oferta(service1,"Mare", "Costinesti", 2024, 5,17, 700);
call    0 returned 1
        -:  300:
        1:  301:    oferta * * filtru = malloc(service1->repository->capacitate * sizeof(oferta*));
        -:  302:
        3:  303:    for(int i = 0; i < service1->repository->capacitate ; i++){
        3:  303-block  0
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:  304:        data * data1 = malloc(sizeof(data));
        2:  305:        creare_data(data1,1,1,1);
        2:  305-block  0
call    0 returned 2
        2:  306:        filtru[i] = malloc(sizeof(oferta));
        2:  307:        creare_oferta(filtru[i],"1","1",data1,1);
call    0 returned 2
        -:  308:    }
        1:  309:    int numar_oferte_filtru = filtru_tip(service1, "Mare", filtru);
        1:  309-block  0
call    0 returned 1
        -:  310:
        -:  311:
        1:  312:    data * data1 = malloc(sizeof(data));
        1:  313:    creare_data(data1, 17,5,2024);
call    0 returned 1
        1:  314:    oferta *oferta1 = malloc(sizeof(oferta));
        1:  315:    creare_oferta(oferta1,"Mare", "Costinesti", data1, 700);
call    0 returned 1
        -:  316:
       1*:  317:    assert(numar_oferte_filtru == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  317-block  0
call    2 never executed
       1*:  318:    assert(verificare_egalitate(*filtru[0], *oferta1) == 1);
        1:  318-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  318-block  1
call    3 never executed
        -:  319:
        3:  320:    for(int i = 0; i < service1->repository->capacitate ; i++){
        1:  320-block  0
        3:  320-block  1
branch  0 taken 2
branch  1 taken 1 (fallthrough)
        2:  321:        distrugere_oferta(filtru[i]);
        2:  321-block  0
call    0 returned 2
        -:  322:    }
        1:  323:    free(filtru);
        -:  324:
        1:  325:    distrugere_oferta(oferta1);
        1:  325-block  0
call    0 returned 1
        1:  326:    distrugere_service(service1);
call    0 returned 1
        1:  327:}
        -:  328:
        -:  329:
function test_sortare_dupa_pret_si_destinatie called 1 returned 100% blocks executed 73%
        1:  330:void test_sortare_dupa_pret_si_destinatie(){
        1:  331:    repo * repo1 = malloc(sizeof(repo));
        1:  332:    creare_repository(repo1);
        1:  332-block  0
call    0 returned 1
        -:  333:
        1:  334:    service * service1 = malloc(sizeof(service));
        -:  335:
        1:  336:    creare_service(service1, repo1);
call    0 returned 1
        -:  337:
        1:  338:    repo * repo2 = malloc(sizeof(repo));
        1:  339:    creare_repository(repo2);
call    0 returned 1
        -:  340:
        1:  341:    service * service2 = malloc(sizeof(service));
        -:  342:
        1:  343:    creare_service(service2, repo2);
call    0 returned 1
        -:  344:
        1:  345:    adaugare_oferta(service1, "Munte", "Fagaras", 2024, 4,12, 500);
call    0 returned 1
        1:  346:    adaugare_oferta(service1, "Munte", "Arabia Saudita", 2024, 4,12, 500);
call    0 returned 1
        1:  347:    adaugare_oferta(service1, "Munte", "Costinesti", 2024, 4,12, 700);
call    0 returned 1
        1:  348:    adaugare_oferta(service1, "Munte", "Dolomiti", 2024, 4,12, 500);
call    0 returned 1
        1:  349:    adaugare_oferta(service1, "Munte", "Cluj", 2024, 4,12, 600);
call    0 returned 1
        1:  350:    sortare(service1,"crescator",verificare_conditie_sortare_pret, verificare_conditie_sortare_destinatie);
call    0 returned 1
       1*:  351:    assert(strcmp(service1->repository->oferte[0]->destinatie,"Arabia Saudita") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  351-block  0
call    2 never executed
       1*:  352:    assert(strcmp(service1->repository->oferte[1]->destinatie,"Dolomiti") == 0);
        1:  352-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  352-block  1
call    2 never executed
       1*:  353:    assert(strcmp(service1->repository->oferte[2]->destinatie,"Fagaras") == 0);
        1:  353-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  353-block  1
call    2 never executed
       1*:  354:    assert(strcmp(service1->repository->oferte[3]->destinatie,"Cluj") == 0);
        1:  354-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  354-block  1
call    2 never executed
       1*:  355:    assert(strcmp(service1->repository->oferte[4]->destinatie,"Costinesti") == 0);
        1:  355-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  355-block  1
call    2 never executed
        -:  356:
        1:  357:    sortare(service1, "descrescator", verificare_conditie_sortare_pret, verificare_conditie_sortare_destinatie);
        1:  357-block  0
call    0 returned 1
       1*:  358:    assert(strcmp(service1->repository->oferte[0]->destinatie,"Costinesti") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  358-block  0
call    2 never executed
       1*:  359:    assert(strcmp(service1->repository->oferte[1]->destinatie,"Cluj") == 0);
        1:  359-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  359-block  1
call    2 never executed
       1*:  360:    assert(strcmp(service1->repository->oferte[2]->destinatie,"Fagaras") == 0);
        1:  360-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  360-block  1
call    2 never executed
       1*:  361:    assert(strcmp(service1->repository->oferte[3]->destinatie,"Dolomiti") == 0);
        1:  361-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  361-block  1
call    2 never executed
       1*:  362:    assert(strcmp(service1->repository->oferte[4]->destinatie,"Arabia Saudita") == 0);
        1:  362-block  0
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  362-block  1
call    2 never executed
        -:  363:
        1:  364:    int status1 = sortare(service2, "crescator",verificare_conditie_sortare_pret,verificare_conditie_sortare_destinatie);
        1:  364-block  0
call    0 returned 1
       1*:  365:    assert(status1 == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  365-block  0
call    2 never executed
        -:  366:
        -:  367:
        1:  368:    data *data1 = malloc(sizeof(data));
        1:  369:    creare_data(data1,12,12,2024);
        1:  369-block  0
call    0 returned 1
        -:  370:
        1:  371:    oferta *oferta1 = malloc(sizeof(oferta));
        1:  372:    creare_oferta(oferta1,"Munte", "Fagaras", data1, 500);
call    0 returned 1
        -:  373:
        1:  374:    data *data2 = malloc(sizeof(data));
        1:  375:    creare_data(data2,12,12,2024);
call    0 returned 1
        -:  376:
        1:  377:    oferta *oferta2 = malloc(sizeof(oferta));
        1:  378:    creare_oferta(oferta2, "Mare", "Costinesti", data2, 700);
call    0 returned 1
        -:  379:
        1:  380:    int status = verificare_conditie_sortare_destinatie(*oferta1,*oferta2, "");
call    0 returned 1
       1*:  381:    assert(status == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  381-block  0
call    2 never executed
        -:  382:
        1:  383:    status = verificare_conditie_sortare_pret(*oferta1,*oferta2, "");
        1:  383-block  0
call    0 returned 1
       1*:  384:    assert(status == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  384-block  0
call    2 never executed
        -:  385:
        1:  386:    distrugere_oferta(oferta1);
        1:  386-block  0
call    0 returned 1
        1:  387:    distrugere_oferta(oferta2);
call    0 returned 1
        -:  388:
        1:  389:    distrugere_service(service1);
call    0 returned 1
        1:  390:    distrugere_service(service2);
call    0 returned 1
        1:  391:}
        -:  392:
function test_adaugare_oferta called 1 returned 100% blocks executed 81%
        1:  393:void test_adaugare_oferta(){
        1:  394:    repo * repo1 = malloc(sizeof(repo));
        1:  395:    creare_repository(repo1);
        1:  395-block  0
call    0 returned 1
        -:  396:
        1:  397:    service * service1 = malloc(sizeof(service));
        -:  398:
        1:  399:    creare_service(service1, repo1);
call    0 returned 1
        -:  400:
        1:  401:    adaugare_oferta(service1, "Munte", "Fagaras", 2024, 4,12, 500);
call    0 returned 1
        -:  402:
        1:  403:    data  * data1 = malloc(sizeof(data));
        1:  404:    creare_data(data1, 12,4,2024);
call    0 returned 1
        -:  405:
        1:  406:    oferta * oferta1 = malloc(sizeof(oferta));
        1:  407:    creare_oferta(oferta1, "Munte", "Fagaras", data1, 500);
call    0 returned 1
        -:  408:
       1*:  409:    assert(service1->repository->numar_oferte_curente == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  409-block  0
call    2 never executed
       1*:  410:    assert(verificare_egalitate(*service1->repository->oferte[0], *oferta1) == 1);
        1:  410-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  410-block  1
call    3 never executed
        -:  411:
        1:  412:    int status = adaugare_oferta(service1, "munte", "Fagaras", 2024,4,12,500);
        1:  412-block  0
call    0 returned 1
       1*:  413:    assert(status == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  413-block  0
call    2 never executed
        1:  414:    distrugere_oferta(oferta1);
        1:  414-block  0
call    0 returned 1
        1:  415:    distrugere_service(service1);
call    0 returned 1
        1:  416:}
        -:  417:
        -:  418:
        -:  419:
function test_stergere_oferta called 1 returned 100% blocks executed 80%
        1:  420:void test_stergere_oferta(){
        1:  421:    repo * repo1 = malloc(sizeof(repo));
        1:  422:    creare_repository(repo1);
        1:  422-block  0
call    0 returned 1
        -:  423:
        1:  424:    service * service1 = malloc(sizeof(service));
        1:  425:    creare_service(service1,repo1);
call    0 returned 1
        -:  426:
        1:  427:    adaugare_oferta(service1, "Munte", "Fagaras", 2024, 4,12, 500);
call    0 returned 1
       1*:  428:    assert(service1->repository->numar_oferte_curente == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  428-block  0
call    2 never executed
        -:  429:
        1:  430:    stergere_oferta(service1, 0);
        1:  430-block  0
call    0 returned 1
       1*:  431:    assert(service1->repository->numar_oferte_curente == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  431-block  0
call    2 never executed
        -:  432:
        1:  433:    distrugere_service(service1);
        1:  433-block  0
call    0 returned 1
        -:  434:
        1:  435:}
        -:  436:
function test_modificare_oferta called 1 returned 100% blocks executed 87%
        1:  437:void test_modificare_oferta(){
        1:  438:    repo * repo1 = malloc(sizeof(repo));
        1:  439:    creare_repository(repo1);
        1:  439-block  0
call    0 returned 1
        -:  440:
        1:  441:    service * service1 = malloc(sizeof(service));
        1:  442:    creare_service(service1,repo1);
call    0 returned 1
        -:  443:
        1:  444:    adaugare_oferta(service1, "Munte", "Fagaras", 2024, 4,12, 500);
call    0 returned 1
        -:  445:
        1:  446:    data *data1 = malloc(sizeof(data));
        1:  447:    creare_data(data1, 7,4,2023);
call    0 returned 1
        -:  448:
        1:  449:    oferta * oferta1 = malloc(sizeof(oferta));
        1:  450:    creare_oferta(oferta1, "Mare", "Costinesti", data1, 400);
call    0 returned 1
        -:  451:
        1:  452:    modificare_oferta(service1,0, "Mare", "Costinesti", 2023,4,7,400);
call    0 returned 1
       1*:  453:    assert(verificare_egalitate(*service1->repository->oferte[0], *oferta1) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  453-block  0
call    3 never executed
        -:  454:
        1:  455:    int status = modificare_oferta(service1, 0, "munte", "Fagaras", 2024, 4, 12, 500);
        1:  455-block  0
call    0 returned 1
       1*:  456:    assert(status == 2);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  456-block  0
call    2 never executed
        -:  457:
        1:  458:    distrugere_oferta(oferta1);
        1:  458-block  0
call    0 returned 1
        1:  459:    distrugere_service(service1);
call    0 returned 1
        1:  460:}
        -:  461:
function teste_service called 1 returned 100% blocks executed 100%
        1:  462:void teste_service(){
        1:  463:    test_adaugare_oferta();
        1:  463-block  0
call    0 returned 1
        1:  464:    test_stergere_oferta();
call    0 returned 1
        1:  465:    test_modificare_oferta();
call    0 returned 1
        1:  466:    test_filtru_destinatie();
call    0 returned 1
        1:  467:    test_filtru_pret();
call    0 returned 1
        1:  468:    test_filtru_tip();
call    0 returned 1
        1:  469:    test_sortare_dupa_pret_si_destinatie();
call    0 returned 1
        1:  470:}
